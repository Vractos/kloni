// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/announcement/interface.go

// Package mock_announcement is a generated GoMock package.
package mock_announcement

import (
	reflect "reflect"

	announcement "github.com/Vractos/kloni/usecases/announcement"
	common "github.com/Vractos/kloni/usecases/common"
	store "github.com/Vractos/kloni/usecases/store"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CloneAnnouncement mocks base method.
func (m *MockUseCase) CloneAnnouncement(input announcement.CloneAnnouncementDtoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneAnnouncement", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneAnnouncement indicates an expected call of CloneAnnouncement.
func (mr *MockUseCaseMockRecorder) CloneAnnouncement(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneAnnouncement", reflect.TypeOf((*MockUseCase)(nil).CloneAnnouncement), input)
}

// RetrieveAnnouncements mocks base method.
func (m *MockUseCase) RetrieveAnnouncements(sku string, credentials store.Credentials) (*[]common.MeliAnnouncement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAnnouncements", sku, credentials)
	ret0, _ := ret[0].(*[]common.MeliAnnouncement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnnouncements indicates an expected call of RetrieveAnnouncements.
func (mr *MockUseCaseMockRecorder) RetrieveAnnouncements(sku, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnnouncements", reflect.TypeOf((*MockUseCase)(nil).RetrieveAnnouncements), sku, credentials)
}

// UpdateQuantity mocks base method.
func (m *MockUseCase) UpdateQuantity(id string, quantity int, credentials store.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", id, quantity, credentials)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockUseCaseMockRecorder) UpdateQuantity(id, quantity, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockUseCase)(nil).UpdateQuantity), id, quantity, credentials)
}
