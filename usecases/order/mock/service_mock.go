// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/order/interface.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	entity "github.com/Vractos/dolly/entity"
	order "github.com/Vractos/dolly/usecases/order"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ProcessOrder mocks base method.
func (m *MockUseCase) ProcessOrder(order order.OrderMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockUseCaseMockRecorder) ProcessOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockUseCase)(nil).ProcessOrder), order)
}

// ProcessWebhook mocks base method.
func (m *MockUseCase) ProcessWebhook(input order.OrderWebhookDtoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWebhook", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessWebhook indicates an expected call of ProcessWebhook.
func (mr *MockUseCaseMockRecorder) ProcessWebhook(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWebhook", reflect.TypeOf((*MockUseCase)(nil).ProcessWebhook), input)
}

// MockQueueProducer is a mock of QueueProducer interface.
type MockQueueProducer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueProducerMockRecorder
}

// MockQueueProducerMockRecorder is the mock recorder for MockQueueProducer.
type MockQueueProducerMockRecorder struct {
	mock *MockQueueProducer
}

// NewMockQueueProducer creates a new mock instance.
func NewMockQueueProducer(ctrl *gomock.Controller) *MockQueueProducer {
	mock := &MockQueueProducer{ctrl: ctrl}
	mock.recorder = &MockQueueProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueProducer) EXPECT() *MockQueueProducerMockRecorder {
	return m.recorder
}

// PostOrderNotification mocks base method.
func (m *MockQueueProducer) PostOrderNotification(input order.OrderWebhookDtoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrderNotification", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostOrderNotification indicates an expected call of PostOrderNotification.
func (mr *MockQueueProducerMockRecorder) PostOrderNotification(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrderNotification", reflect.TypeOf((*MockQueueProducer)(nil).PostOrderNotification), input)
}

// MockQueueConsumer is a mock of QueueConsumer interface.
type MockQueueConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueConsumerMockRecorder
}

// MockQueueConsumerMockRecorder is the mock recorder for MockQueueConsumer.
type MockQueueConsumerMockRecorder struct {
	mock *MockQueueConsumer
}

// NewMockQueueConsumer creates a new mock instance.
func NewMockQueueConsumer(ctrl *gomock.Controller) *MockQueueConsumer {
	mock := &MockQueueConsumer{ctrl: ctrl}
	mock.recorder = &MockQueueConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueConsumer) EXPECT() *MockQueueConsumerMockRecorder {
	return m.recorder
}

// ConsumeOrderNotification mocks base method.
func (m *MockQueueConsumer) ConsumeOrderNotification() []order.OrderMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeOrderNotification")
	ret0, _ := ret[0].([]order.OrderMessage)
	return ret0
}

// ConsumeOrderNotification indicates an expected call of ConsumeOrderNotification.
func (mr *MockQueueConsumerMockRecorder) ConsumeOrderNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeOrderNotification", reflect.TypeOf((*MockQueueConsumer)(nil).ConsumeOrderNotification))
}

// DeleteOrderNotification mocks base method.
func (m *MockQueueConsumer) DeleteOrderNotification(receiptHandle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderNotification", receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderNotification indicates an expected call of DeleteOrderNotification.
func (mr *MockQueueConsumerMockRecorder) DeleteOrderNotification(receiptHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderNotification", reflect.TypeOf((*MockQueueConsumer)(nil).DeleteOrderNotification), receiptHandle)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// ConsumeOrderNotification mocks base method.
func (m *MockQueue) ConsumeOrderNotification() []order.OrderMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeOrderNotification")
	ret0, _ := ret[0].([]order.OrderMessage)
	return ret0
}

// ConsumeOrderNotification indicates an expected call of ConsumeOrderNotification.
func (mr *MockQueueMockRecorder) ConsumeOrderNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeOrderNotification", reflect.TypeOf((*MockQueue)(nil).ConsumeOrderNotification))
}

// DeleteOrderNotification mocks base method.
func (m *MockQueue) DeleteOrderNotification(receiptHandle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderNotification", receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderNotification indicates an expected call of DeleteOrderNotification.
func (mr *MockQueueMockRecorder) DeleteOrderNotification(receiptHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderNotification", reflect.TypeOf((*MockQueue)(nil).DeleteOrderNotification), receiptHandle)
}

// PostOrderNotification mocks base method.
func (m *MockQueue) PostOrderNotification(input order.OrderWebhookDtoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrderNotification", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostOrderNotification indicates an expected call of PostOrderNotification.
func (mr *MockQueueMockRecorder) PostOrderNotification(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrderNotification", reflect.TypeOf((*MockQueue)(nil).PostOrderNotification), input)
}

// MockRepoWriter is a mock of RepoWriter interface.
type MockRepoWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRepoWriterMockRecorder
}

// MockRepoWriterMockRecorder is the mock recorder for MockRepoWriter.
type MockRepoWriterMockRecorder struct {
	mock *MockRepoWriter
}

// NewMockRepoWriter creates a new mock instance.
func NewMockRepoWriter(ctrl *gomock.Controller) *MockRepoWriter {
	mock := &MockRepoWriter{ctrl: ctrl}
	mock.recorder = &MockRepoWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoWriter) EXPECT() *MockRepoWriterMockRecorder {
	return m.recorder
}

// RegisterOrder mocks base method.
func (m *MockRepoWriter) RegisterOrder(o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockRepoWriterMockRecorder) RegisterOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockRepoWriter)(nil).RegisterOrder), o)
}

// MockRepoReader is a mock of RepoReader interface.
type MockRepoReader struct {
	ctrl     *gomock.Controller
	recorder *MockRepoReaderMockRecorder
}

// MockRepoReaderMockRecorder is the mock recorder for MockRepoReader.
type MockRepoReaderMockRecorder struct {
	mock *MockRepoReader
}

// NewMockRepoReader creates a new mock instance.
func NewMockRepoReader(ctrl *gomock.Controller) *MockRepoReader {
	mock := &MockRepoReader{ctrl: ctrl}
	mock.recorder = &MockRepoReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoReader) EXPECT() *MockRepoReaderMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockRepoReader) GetOrder(orderMarketplaceId string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderMarketplaceId)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepoReaderMockRecorder) GetOrder(orderMarketplaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepoReader)(nil).GetOrder), orderMarketplaceId)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(orderMarketplaceId string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderMarketplaceId)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(orderMarketplaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), orderMarketplaceId)
}

// RegisterOrder mocks base method.
func (m *MockRepository) RegisterOrder(o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockRepositoryMockRecorder) RegisterOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockRepository)(nil).RegisterOrder), o)
}

// MockCacheWriter is a mock of CacheWriter interface.
type MockCacheWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCacheWriterMockRecorder
}

// MockCacheWriterMockRecorder is the mock recorder for MockCacheWriter.
type MockCacheWriterMockRecorder struct {
	mock *MockCacheWriter
}

// NewMockCacheWriter creates a new mock instance.
func NewMockCacheWriter(ctrl *gomock.Controller) *MockCacheWriter {
	mock := &MockCacheWriter{ctrl: ctrl}
	mock.recorder = &MockCacheWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheWriter) EXPECT() *MockCacheWriterMockRecorder {
	return m.recorder
}

// SetOrder mocks base method.
func (m *MockCacheWriter) SetOrder(o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockCacheWriterMockRecorder) SetOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockCacheWriter)(nil).SetOrder), o)
}

// MockCacheReader is a mock of CacheReader interface.
type MockCacheReader struct {
	ctrl     *gomock.Controller
	recorder *MockCacheReaderMockRecorder
}

// MockCacheReaderMockRecorder is the mock recorder for MockCacheReader.
type MockCacheReaderMockRecorder struct {
	mock *MockCacheReader
}

// NewMockCacheReader creates a new mock instance.
func NewMockCacheReader(ctrl *gomock.Controller) *MockCacheReader {
	mock := &MockCacheReader{ctrl: ctrl}
	mock.recorder = &MockCacheReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheReader) EXPECT() *MockCacheReaderMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockCacheReader) GetOrder(orderId string) (*entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderId)
	ret0, _ := ret[0].(*entity.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockCacheReaderMockRecorder) GetOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockCacheReader)(nil).GetOrder), orderId)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockCache) GetOrder(orderId string) (*entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderId)
	ret0, _ := ret[0].(*entity.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockCacheMockRecorder) GetOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockCache)(nil).GetOrder), orderId)
}

// SetOrder mocks base method.
func (m *MockCache) SetOrder(o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockCacheMockRecorder) SetOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockCache)(nil).SetOrder), o)
}
